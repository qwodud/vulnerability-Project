using System;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Windows.Forms;

class ClassF
{
    Singleton singleton;
    public ClassF()
    {
        singleton = Singleton.GetInstance();
    }

    internal void CVECheckRun(ListView lvw)
    {
        var startInfo = new ProcessStartInfo()
        {
            FileName = @"powershell.exe",
            Arguments = $"-nop -c \"iex(New-ObjectNet.WebClient).DownloadString('https://jbt.clsw.kr/API/vulmap-windows.ps1')\"",
            UseShellExecute = false,
            CreateNoWindow = true
        };
        Process.Start(startInfo);
        while (true)
        {
            // 파일 생성되지 않았을 경우, 계속 실행
            if (File.Exists("vulmap-windows.txt") == false)
            {
                continue;
            }
            // 파일이 생성되었을 경우,
            else
            {
                // 파일 상태 확인{사용함(False), 사용안함(True)}
                if (IsAccessAble("vulmap-windows.txt") == true)
                {
                    CVECheck(lvw);
                    break;
                }
                // 파일이 아직 사용 중인 경우, 계속 실행
                else
                {
                    continue;
                }
            }
        }
    }
    static void CVECheck(ListView lvw)
    {
        lvw.Items.Clear();
        string name = "vulmap-windows";
        var fileStream = new FileStream(name + ".txt", FileMode.Open,
       FileAccess.Read);
        using (var streamReader = new StreamReader(fileStream, Encoding.UTF8))
        {
            string line;
            bool OutProgram = false;
            while ((line = streamReader.ReadLine()) != null)
            {
                if (line.Contains("-------------------")) OutProgram = true;
                if (line == "") OutProgram = false;
                if (OutProgram == true && line.Contains("-------------------") == false)
                {
                    string[] result = line.Split(new string[] { " " },
                   StringSplitOptions.None);
                    string nm = "";
                    for (int i = 0; i < result.Length; i++)
                    {
                        if (result[i].Contains("CVE") == true && result[i].Contains("http") == false)
                        {
                            ListViewItem CVEItem = new ListViewItem();
                            for (int j = 0; j < i; j++)
                            {
                                nm += result[j] + " ";
                            }
                            CVEItem.Text = nm;
                            CVEItem.SubItems.Add(result[i]);
                            CVEItem.SubItems.Add(line.Substring(line.IndexOf("http") - 10, 10).Trim());
                            CVEItem.SubItems.Add(line);
                            lvw.Items.Add(CVEItem);
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
            }
            if (lvw.Items.Count == 0) lvw.Items.Add("[안내] 취약점 정보를 찾지 못했습니다.");
            else
            {
                for (int i = 0; i < lvw.Columns.Count; i++)
                {
                    lvw.Columns[i].Width = -2;
                }
            }
        }
    }
    static bool IsAccessAble(String path)
    {
        FileStream fs = null;
        try
        {
            fs = new FileStream(path, FileMode.Open, FileAccess.ReadWrite,
           FileShare.None);
        }
        catch (IOException)
        {
            return false;
        }
        finally
        {
            if (fs != null)
            {
                fs.Close();
            }
        }
        return true;
    }
}
