using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Management;
class ClassE
{
    Singleton singleton;
    public ClassE()
    {
        singleton = Singleton.GetInstance();

    }
    internal string Antivirus()
    {
        string result = null;
        int i = 0;
        try
        {
            List<string> avlist = new List<string>();
            using (var searcher = new ManagementObjectSearcher(@"\\" + Environment.MachineName + @"\root\SecurityCenter2", "SELECT * FROM AntivirusProduct"))
            {
 var searcherInstance = searcher.Get();
            foreach (var instance in searcherInstance)
            {
                string name = instance["displayName"].ToString();
                string av_state = Convert.ToInt32(instance["productState"]).ToString("X").PadLeft(6, '0');
                if (name == "Windows Defender") avlist.Add(name);
                else
                {
                    string[] av_value = new string[2];
                    av_value[0] = av_state.Substring(2, 2); // av_value[0](04"10"00) Index2 - Length 2
                if (av_value[0] == "10") av_value[0] = "R"; // 실시간 감시 사용 [R] Real - time
 else if (av_value[0] == "20") av_value[0] = "N"; // 실시간 감시 사용 안함[N] Not Use Real - time
 else if (av_value[0] == "01" || av_value[0] == "00") av_value[0] = "X"; // 알 수 없음 [X] Unknown - 재부팅 권장
                    av_value[1] = av_state.Substring(4, 2); // av_value[1](0410"00"  Index4 - Length 2
                if (av_value[1] == "10") av_value[1] = "U"; // 업데이트 필요 Update[U]

                        else if (av_value[1] == "00") av_value[1] = "X"; // 최신 버전 Update[X]

                        avlist.Add(name + "|" + av_value[0] + "|" + av_value[1] + "|");
                }
                avlist = avlist.Distinct().ToList();
            }
            if (avlist == null) return "Not install";
        }
 for (int avi = 0; avi < avlist.Count; avi++)
        {
            result += avlist[avi] + ", ";
            i++;
        }
        result = result.Substring(0, result.Length - 2);
        result = i + " (" + result + ")";
        return result;
    }
 catch
 {
 return "Not found";
 }
 }
// 원격 터미널 서비스
internal string RemoteTerminal()
{
    RegistryKey reg = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Control\Terminal
Server", true);
    if (reg != null)
    {
        Object val = reg.GetValue("fDenyTSConnections");
        if (val != null)
        {
            if (Convert.ToString(val) == "0") return "Enable";
            else if (Convert.ToString(val) == "1") return "Disable";
            else return Convert.ToString(val);
        }
        else
        {
            return "Not found";
        }
    }
    return string.Empty;
}
internal string AurorunBlock()
{
    string xdevice = null;
    RegistryKey reg = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\P
olicies\Explorer", true);
    if (reg != null)
    {
        string val = Convert.ToString(reg.GetValue("NoDriveTypeAutoRun"));
        if (val != "")
        {
            int devblock = Convert.ToInt32(val);
            if (devblock >= 255)
            { // Any Device
                xdevice += "Any, ";
                devblock = devblock - 255;
            }
            else
            {
                if (devblock >= 40)
                { // Ram
                    xdevice += "RAM, ";
                    devblock = devblock - 40;
                }
                if (devblock >= 20)
                { // CD Rom
                    xdevice += "CD, ";
                    devblock = devblock - 20;
                }
                if (devblock >= 10)
                { // 네트워크 드라이브
                    xdevice += "Network, ";
                    devblock = devblock - 10;
                }
                if (devblock >= 8)
                { // 고정형 드라이브
                    xdevice += "HDD, ";
                    devblock = devblock - 8;
                }
                if (devblock >= 4)
                { // 이동식 드라이브
                    xdevice += "USB, ";
                    devblock = devblock - 4;
                }
                if (devblock >= 1 || devblock == 0)
                { // 알 수 없는 드라이브
                    xdevice += "Unknown, ";
                    devblock = devblock - 1;
                }
            }
            xdevice = xdevice.Substring(0, xdevice.Length - 2); // 마지막 ", " 제거
            if (xdevice == "") xdevice = "Not setting";
            return xdevice;
        }
        else
        {
            return "Not setting";
        }
    }
    return string.Empty;
}
// 화면 보호기 상태 확인
internal string ScreenSaver()
{
    string screensaver;
    RegistryKey reg = Registry.CurrentUser.OpenSubKey(@"Control Panel\Desktop",
   true);
    if (reg != null)
    {
        Object val = reg.GetValue("ScreenSaveActive");
        screensaver = Convert.ToString(val);
        Object ssval1 = reg.GetValue("ScreenSaveTimeOut");
        Object ssval2 = reg.GetValue("ScreenSaverIsSecure");
        if (val != null)
        {
            if (ssval1 == null) ssval1 = "X";
            if (ssval2 == null) ssval2 = "X";
            screensaver = "W:" + ssval1;
            screensaver += "/R:" + ssval2;
            return screensaver;
        }
    }
    else
    {
        return "Registry Access Fail";
    }
    return screensaver;
}
// 복구 콘솔 자동 로그인
internal string RecoveryLogin()
{
    string sPath = Path.GetTempPath() + "RecoveryConsoleAutoLogin.inf";
    ClassZ z = new ClassZ();
    z.RunCommand(@"secedit /export /cfg " + sPath);
    string[] sContents = File.ReadAllLines(sPath);
    string Reconsole = "";
    for (int i = 0; i < sContents.Length; i++)
    {
        if (sContents[i].Contains("SecurityLevel"))
        {
            Reconsole = sContents[i].Substring(sContents[i].Length - 1);
        }
    }
    File.Delete(sPath);
    if (Reconsole == "0") Reconsole = "Remember";
    else if (Reconsole == "1") Reconsole = "Not Remember";
    else Reconsole = "Unknown: " + Reconsole;
    return Reconsole;
}
// OS 침입차단 기능
internal string FWPolicy()
{
    RegistryKey reg = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Services\SharedAcce
ss\Parameters\FirewallPolicy\StandardProfile", true);
    if (reg != null)
    {
        Object val = reg.GetValue("EnableFirewall");
        int val_i = Convert.ToInt32(val);
        if (val != null)
        {
            if (val_i == 1) return "Enable"; // 사용
            else if (val_i == 0) return "Disable"; // 사용하지 않음
            else return Convert.ToString(val);
        }
    }
    return null;
}
// 저장소 활성 상태
internal string CheckDevice()
{
    string[] check = new string[] { "Deny_Read", "Deny_Write", "Deny_Execute",
"Deny_All" };
    string[,] DeviceList = {
 { "CD/DVD", "{53f56308-b6bf-11d0-94f2-00a0c91efb8b}" },
 { "Floppy", "{53f56311-b6bf-11d0-94f2-00a0c91efb8b}" },
 { "USB", "{53f5630d-b6bf-11d0-94f2-00a0c91efb8b}" },
 { "Tape", "{53f5630b-b6bf-11d0-94f2-00a0c91efb8b}" },
 { "WPD", "{6AC27878-A6FA-4155-BA85-F98F491D4F33}" },
 { "WPD", "{F33FDC04-D1AC-4E8E-9A30-19BBD4B108AE}" }
 };
    List<string> list = new List<string>();
    for (int i = 0; i <= DeviceList.GetUpperBound(0); i++)
    {
        string name = DeviceList[i, 0];
        string address = DeviceList[i, 1];
        string value, output = null;
        value = Convert.ToString(Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Mic
rosoft\Windows\RemovableStorageDevices", check[3], ""));
        if (value == "1") return "Any Device Block";
        value = Convert.ToString(Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Mic
rosoft\Windows\RemovableStorageDevices\" + address, check[0], ""));
        if (value != "") output += "R";
        value = Convert.ToString(Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Mic
rosoft\Windows\RemovableStorageDevices\" + address, check[1], ""));
        if (value != "") output += "W";
        value = Convert.ToString(Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Mic
rosoft\Windows\RemovableStorageDevices\" + address, check[2], ""));
        if (value != "") output += "E";
        if (output != null) list.Add(DeviceList[i, 0] + "(" + output + ")");
    }
    list = list.Distinct().ToList();
    string print = string.Join(", ", list.ToArray());
    if (print == "") return "Not setting";
    return print;
}
// 비로그인 시스템 종료
internal string LoginSystemExit()
{
    RegistryKey reg = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\P
olicies\System", true);
    if (reg != null)
    {
        Object val = reg.GetValue("shutdownwithoutlogon");
        int val_i = Convert.ToInt32(val);
        if (val != null)
        {
            if (val_i == 1) return "Enable"; // 사용
            else if (val_i == 0) return "Disable"; // 사용하지 않음
            else return Convert.ToString(val);
        }
    }
    return null;
}
// 로그인 환영 메세지
internal string LoginMessage()
{
    RegistryKey reg = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows\CurrentVersion\P
olicies\System", true);
    if (reg != null)
    {
        string val = reg.GetValue("legalnoticecaption").ToString();
        if (val == "") return "Not setting";
        else val = "{" + val + "}";
        return val;
    }
    return null;
}
internal string SBlock(string course)
{
    if (course == "읽기")
    {
        RegistryKey CustomKeyR = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\Removab
leStorageDevices\Custom\Deny_Read");
        if (CustomKeyR != null) // 구성되지 않음
        {
            foreach (string subKeyName in CustomKeyR.GetSubKeyNames())
            {
                using (RegistryKey tempKey = CustomKeyR.OpenSubKey(subKeyName))
                {
                    string use = CustomKeyR.GetValue("Deny_Read").ToString().Replace("1", "R"); // if 사용(1) => R
                    string DeviceID = string.Empty;
                    foreach (string valueName in tempKey.GetValueNames())
                    {
                        DeviceID += tempKey.GetValue(valueName).ToString() + ",";
                     }
                    DeviceID = DeviceID.Substring(0, DeviceID.Length - 2);
                    return DeviceID;
                }
            }
        }
    }
    else if (course == "쓰기")
    {
        RegistryKey CustomKeyW = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Windows\Removab
leStorageDevices\Custom\Deny_Write");
        if (CustomKeyW != null)
        {
            foreach (string subKeyName in CustomKeyW.GetSubKeyNames())
            {
                using (RegistryKey tempKey = CustomKeyW.OpenSubKey(subKeyName))
                {
                    string use = CustomKeyW.GetValue("Deny_Write").ToString().Replace("1", "W");
                    if (use == "0") use = "";
                    else use = "W";
                    string DeviceID = string.Empty;
                    foreach (string valueName in tempKey.GetValueNames())
                    {
                        DeviceID += tempKey.GetValue(valueName).ToString() + ",";
                     }
                    DeviceID = DeviceID.Substring(0, DeviceID.Length - 2);

                    return DeviceID;
                }
            }
        }
    }
    return null;
}
}


