using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.NetworkInformation;
class ClassZ
{
    Singleton singleton; public ClassZ() { singleton = Singleton.GetInstance(); }
    internal string RunCommand(string sender)
    {
        string output = null; ProcessStartInfo psi = new ProcessStartInfo("cmd", "/c " + sender)
        {
            WindowStyle = ProcessWindowStyle.Hidden,
            UseShellExecute = false,
            RedirectStandardOutput = true,
            CreateNoWindow = true
        }; using (Process process = Process.Start(psi))
        {
            using (StreamReader reader = process.StandardOutput)
            {
                output = reader.ReadToEnd();
            }
        }
        return output;
    }
    internal bool Internet()
    {
        System.Net.WebRequest req = System.Net.WebRequest.Create("https://jbt.clsw.kr"); System.Net.WebResponse resp = default(System.Net.WebResponse); try
        { resp = req.GetResponse(); resp.Close(); req = null; return true; }
        catch
        { req = null; return false; }
    }
    internal bool Json_Upload()
    {
        bool connection = NetworkInterface.GetIsNetworkAvailable(); if (connection == true)
        {
            try
            { WebClient client = new WebClient(); string myFile = Path.GetPathRoot(Environment.SystemDirectory) + @"PCVulnerability.json"; client.Credentials = CredentialCache.DefaultCredentials; client.UploadFile("https://jbt.clsw.kr/API/req.php", "POST", myFile); client.Dispose(); return true; }
            catch
            { return false; }
        }
        else
        { return false; }
    }
}