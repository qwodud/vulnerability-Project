using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
class ClassB
{
    Singleton singleton;
    public ClassB()
    {
        singleton = Singleton.GetInstance();
    }
    private string Messenger = null;
    private int MessengerLen = 0;
    // 시작 프로그램 32비트 프로그램 정보를 가져오기 위해
    [DllImport("kernel32.dll", SetLastError = true)]
    static extern bool Wow64DisableWow64FsRedirection(ref IntPtr ptr);
    [DllImport("kernel32.dll", SetLastError = true)]
    static extern bool Wow64RevertWow64FsRedirection(IntPtr ptr);
    // Spcial Folder 정보 가져오기 (시작 폴더 계산을 위해 사용)
    [DllImport("shell32.dll")]
    static extern bool SHGetSpecialFolderPath(IntPtr hwndOwner, [Out] StringBuilder lpszPath, int nFolder, bool fCreate);
    const int CSIDL_COMMON_STARTUP = 0x0018;
    internal void GetStartProReg(ListView lvw, string type)
    {
        try
        {
            IntPtr wow64Value = IntPtr.Zero;
            // 레지스트리 경로
            string path = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Run";
            // 사용 유무 정보 확인을 위해서 다른 경로 사용
            string path2 = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\Run";
            // 한 번만 실행
            string pathone = @"SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce";
            // 레지스트리 액세스 : HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run
            var baseReg = RegistryKey.OpenBaseKey(RegistryHive.ClassesRoot, RegistryView.Default);
            if (type == "HKLM64")
            {
                // 64비트 레지스트리 리다이렉션 비활성화 (실제 접근을 위해)
                Wow64DisableWow64FsRedirection(ref wow64Value);
                baseReg = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64);
                baseReg = baseReg.OpenSubKey(path, false);
            }
            else if (type == "HKLM32")
            {
                baseReg = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32);
                baseReg = baseReg.OpenSubKey(path, false);
            }
            else if (type == "HKCU")
            {
                baseReg = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Registry64);
                baseReg = baseReg.OpenSubKey(path, false);
            }
            else if (type == "HKLMO")
            {
                baseReg = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64);
                baseReg = baseReg.OpenSubKey(pathone, false);
            }
            else if (type == "HKCUO")
            {
                baseReg = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Registry64);
                baseReg = baseReg.OpenSubKey(pathone, false);
            }
            foreach (string program in baseReg.GetValueNames())
            {
                ListViewItem StartLVI = new ListViewItem();
                var status = RegistryKey.OpenBaseKey(RegistryHive.ClassesRoot, RegistryView.Default);
                if (type == "HKLM64")
                {
                    status = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64);
                    status = status.OpenSubKey(path2, false);
                }
                else if (type == "HKLM32")
                {
                    status = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry64);
                    status = status.OpenSubKey(path2, false);
                }
                else if (type == "HKCU")
                {
                    status = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Registry64);
                    status = status.OpenSubKey(path2, false);
                }
                if (status == null) StartLVI.Text = "E1";
                if (type == "HKLM64") StartLVI.SubItems.Add("HKLM/Run(64)");
                else if (type == "HKLM32") StartLVI.SubItems.Add("HKLM/Run(32)");
                else if (type == "HKCU") StartLVI.SubItems.Add("HKCU/Run");
                else if (type == "HKLMO")
                {
                    StartLVI.Text = "O";
                    StartLVI.SubItems.Add("HKLM/RunOnce");
                }
                else if (type == "HKCUO")
                {
                    StartLVI.Text = "O";
                    StartLVI.SubItems.Add("HKCU/RunOnce");
                }
                if (program == "") continue; // 정보가 비어있으면 다음으로 이동
                string StartPath = baseReg.GetValue(program).ToString(); // 파일 경로(매개변수 정보까지)
                string RealPath = StartPath; // 복사
                if (RealPath.IndexOf("\"") == 0) RealPath = RealPath.Substring(1); // 첫글자가 "인 경우 다음 글자부터
                if (RealPath.Contains(".exe")) RealPath = RealPath.Substring(0, RealPath.IndexOf(".exe")) + ".exe";
                // 사용유무
                if (type != "HKCUO" && type != "HKLMO")
                {
                    if (status.GetValue(program) == null) StartLVI.Text = "O";
                    else
                    {
                        byte[] StartusByte = (byte[])status.GetValue(program);
                        if (StartusByte == null) StartLVI.Text = "O";
                        else
                        {
                            var StatusStr = BitConverter.ToString(StartusByte).Substring(0, 2);
                            if (Convert.ToInt32(StatusStr) % 2 == 0) StatusStr = "O";
                            else if (Convert.ToInt32(StatusStr) % 2 == 1) StatusStr = "X";
                            else StatusStr = "E2";
                            StartLVI.Text = StatusStr;
                        }
                    }
                }
                else
                {
                    StartLVI.Text = "O";
                }
                // 프로그램
                StartLVI.SubItems.Add(program);
                // 게시자
                if (File.Exists(RealPath)) // 파일이 있는 경우만 수행
                {
                    FileVersionInfo FI = FileVersionInfo.GetVersionInfo(RealPath); // 파일 실제 경로로 파일 정보 습득
                    if (FI.CompanyName != null)
                    {
                        StartLVI.SubItems.Add(FI.CompanyName); // 회사 정보
                        string[] MSG_Name = { "KakaoTalk", "Skype for Desktop", "LINE", "NATEON" };
                        string[] MSG_Company = { "Kakao Corp", "SkypeTechnologies", "LINE Corporation", "SK Communications" };
                        for (int i = 0; i < MSG_Name.Length; i++)
                        {
                            if (FI.CompanyName.Contains(MSG_Company[i]) == true &&
                           program.Contains(MSG_Name[i]) == true)
                            {
                                MessengerLen = MessengerLen + 1;
                                StartLVI.ForeColor = Color.Red;
                                Messenger += program + ", ";
                            }
                        }
                    }
                    else StartLVI.SubItems.Add("E4");
                }
                else
                {
                    StartLVI.SubItems.Add("");
                }
                // 사용자
                if (type == "HKCU" || type == "HKCUO")
                {
                    string fullName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
                    string[] temp = fullName.Split('\\');
                    StartLVI.SubItems.Add(temp[1]);
                }
                else StartLVI.SubItems.Add("모든 사용자");
                // 파일
                StartLVI.SubItems.Add(RealPath); // 전체 경로(매개변수 포함)
                                                 // StartLVI 내용 실제 추가
                lvw.Items.Add(StartLVI);
                // 정보 접근을 마쳤으므로 64비트 레지스트리 리다이렉션 다시 활성화
                Wow64RevertWow64FsRedirection(wow64Value);
            }
        }
        catch
        {
        }
    }
    internal void GetStartProFile(ListView lvw, string type)
    {
        string dirPath = string.Empty;
        if (type == "U") dirPath = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
        else if (type == "A") dirPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonStartup);
        if (Directory.Exists(dirPath))
        {
            DirectoryInfo di = new DirectoryInfo(dirPath);
            foreach (var item in di.GetFiles())
            {
                ListViewItem StartLVI = new ListViewItem();
                if (item.ToString() == "desktop.ini") continue;
                StartLVI.Text = "O";
                if (type == "U") StartLVI.SubItems.Add("StartUp(User) Folder");
                else if (type == "A") StartLVI.SubItems.Add("StartUp(All) Folder");
                StartLVI.SubItems.Add(item.Name);
                StartLVI.SubItems.Add("(만듬) " + item.CreationTime.ToString());
                if (type == "U")
                {
                    string fullName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
                    string[] temp = fullName.Split('\\');
                    StartLVI.SubItems.Add(temp[1]);
                }
                else StartLVI.SubItems.Add("모든 사용자");
                // StartLVI 내용 실제 추가
                lvw.Items.Add(StartLVI);
                StartLVI.SubItems.Add(item.FullName);
                // 정렬
                for (int width = 0; width < lvw.Columns.Count; width++)
                {
                    if (width == 0) lvw.Columns[width].Width = 50;
                    else lvw.Columns[width].Width = -2;
                }
            }
        }
    }
    internal void WinMsgAppCheck(ListView lvw)
    {
        string WinApp = SearchDirectory(Path.GetPathRoot(Environment.SystemDirectory) + @"\ProgramFiles\WindowsApps");
        if (WinApp != null)
        {
            try
            {
                RegistryKey rkey = Registry.CurrentUser.OpenSubKey(@"Software\Classes\LocalSettings\Software\Microsoft\Windows\CurrentVersion\AppModel\SystemAppData");
                string[] subKeynames = rkey.GetSubKeyNames();
                string WinMsg = "1CB77C17.17884BE984322"; // 카카오톡만 구현된 기능이므로 배열 미사용
                foreach (var item in subKeynames)
                {
                    if (item.Contains(WinMsg) == false) continue;
                    // 카카오톡만 구현된 기능이므로 배열 미사용
                    string regpath = @"Software\Classes\LocalSettings\Software\Microsoft\Windows\CurrentVersion\AppModel\SystemAppData\" +
                   item + @"\KakaoTalkUWP";
                    ListViewItem StartLVI = new ListViewItem();
                    using (var root = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Registry64))
                    {
                        using (var key = root.OpenSubKey(regpath, false))
                        {
                            MessengerLen++;
                            StartLVI.ForeColor = Color.Red;
                            string test = key.GetValue("State").ToString();
                            if (test == "2") test = "O";
                            else if (test == "0") test = "X";
                            else test = "X";
                            string RealPath = Environment.ExpandEnvironmentVariables(WinApp);
                            StartLVI.Text = test;
                            StartLVI.SubItems.Add("Windows Apps");
                            FileVersionInfo FI = FileVersionInfo.GetVersionInfo(RealPath);
                            Messenger += FI.ProductName + "(" + "W" + "), ";
                            StartLVI.SubItems.Add(FI.ProductName);
                            StartLVI.SubItems.Add(FI.CompanyName);
                            // 사용자
                            string fullName = System.Security.Principal.WindowsIdentity.GetCurrent().Name;
                            string[] temp = fullName.Split('\\');
                            StartLVI.SubItems.Add(temp[1]);
                            StartLVI.SubItems.Add(RealPath); // 전체 경로(매개변수 포함)
                            lvw.Items.Add(StartLVI);
                        };
                    }
                }
            }
            catch
            {
                //lvw.Items.Add("[안내] 윈도우 앱스토어 접근에 문제가 생겼습니다.");
            }
        }
    }
    internal string SearchDirectory(String path)
    {
        try
        {
            foreach (string strdir in Directory.GetDirectories(path))
            {
                foreach (string strfile in Directory.GetFiles(strdir, "*Kakaotalk.exe"))
                {
                    return strfile;
                }
                SearchDirectory(strdir);
            }
        }
        catch
        {
        }
        return string.Empty;
    }
    internal string TotalMSG()
    {
        Messenger = Messenger.Substring(0, Messenger.Length - 2);
        return Messenger;
    }
    internal string TotalPrint(ListView lvw)
    {
        lvw.Items.Clear();
        GetStartProReg(lvw, "HKLM64");
        GetStartProReg(lvw, "HKLM32");
        GetStartProReg(lvw, "HKCU");
        GetStartProReg(lvw, "HKLMO");
        GetStartProReg(lvw, "HKCUO");
        GetStartProFile(lvw, "U");
        GetStartProFile(lvw, "A");//전체: 모든 사용자
        WinMsgAppCheck(lvw);
        if (lvw.Items.Count > 0 && MessengerLen > 0) return " (" + MessengerLen + "/" + lvw.Items.Count.ToString() + ")";
        if (lvw.Items.Count > 0) return " (0/" + lvw.Items.Count.ToString() + ")";
        return "";
    }
}
