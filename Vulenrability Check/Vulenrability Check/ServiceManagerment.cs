using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.NetworkInformation;
using System.ServiceProcess;
using System.Text.RegularExpressions;
using System.Windows.Forms;
class ClassC
{
    Singleton singleton;
    public ClassC()
    {
        singleton = Singleton.GetInstance();
    }
    internal string WMState()
    {
        RegistryKey reg = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Policies\Microsoft\Messenger\Client", true);
        if (reg != null)
        {
            Object val = reg.GetValue("PreventRun");
            int val_i = Convert.ToInt32(val);
            if (null != val)
            {
                if (val_i == 0) return "Enable"; // 허용
                else if (val_i == 1) return "Disable"; // 허용 안함
                else return Convert.ToString(val);
            }
        }
        return "Not setting";
    }
    internal string Messengers()
    {
        string MSGResult = null;
        int temp = 0;
        if (Messenger(0)) { MSGResult += "Kakaotalk, "; temp++; }
        if (Messenger(1)) { MSGResult += "Line, "; temp++; }
        if (Messenger(2)) { MSGResult += "Skype, "; temp++; }
        if (Messenger(3)) { MSGResult += "NateOn, "; temp++; }
        if (Messenger(4)) { MSGResult += "Kakaotalk Apps, "; temp++; }
        if (Messenger(5)) { MSGResult += "Line Apps, "; temp++; }
        if (Messenger(6)) { MSGResult += "Skype Apps, "; temp++; }
        if (Messenger(7)) { MSGResult += "Skype for Business, "; temp++; }
        try
        {
            MSGResult = MSGResult.Substring(0, MSGResult.Length - 2); // 마지막 공백( ) + 콤마(,) 제거
            MatchCollection MessengerCount = Regex.Matches(MSGResult, ",");
            MSGResult = MessengerCount.Count + 1 + " (" + MSGResult + ")";
        }
        catch
        {
            MSGResult = "Not found"; // 수정, 메신저 미발견 시
        }
        return MSGResult;
    }
    internal bool Messenger(int check)
    {
        try
        {
            var drive = Path.GetPathRoot(Environment.SystemDirectory);
            bool installed = false;
            string test;
            if (check == 0)
            { // Kakaotalk Check
                test = Convert.ToString(Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\KakaoTalk", "UninstallString", ""));
                if (File.Exists(test)) return true;
            }
            else if (check == 1)
            { // Line Check
                test = Convert.ToString(Registry.GetValue(@"HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\LINE", "UninstallString", ""));
                if (test != null)
                {
                    test = Convert.ToString(Registry.GetValue(@"HKEY_CURRENT_USER\Software\NHNCorpration\LINE", "RunOnce", ""));
                    if (test != null)
                    { // Unistaller Not Remove
                        test = Environment.GetEnvironmentVariable(test); // Get Registry Save File
                        if (File.Exists(test)) return true; // If Exist
                    }
                    else
                    { // Use Order Registry
                        test = Convert.ToString(Registry.GetValue(@"HKEY_CURRENT_USER\Software\Naver\LINE",
                       "RunOnce", ""));
                        if (test != null)
                        { // Uninstaller Not Remove
                            test = Environment.GetEnvironmentVariable(test); // Get Registry Save File
                            if (File.Exists(test)) return true; // If Exist
                        }
                    }
                }
            }
            else if (check == 2)
            { // Skype Check
                test = Convert.ToString(Registry.GetValue(@"HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall\Skype_is1", "UninstallString", ""));
                if (File.Exists(test)) return true;
            }
            else if (check == 3)
            { // NateOn - Not Use Registry, But Install Path Not Change > Default Folder Check
                test = Environment.GetEnvironmentVariable(@"ProgramFiles(x86)") + @"\SK Communications\NATEON\BIN\NateOnMain.exe";
                if (File.Exists(test)) return true;
                else
                { // Default Use x86(32bit), Same Up Path, But Bottom Check
                    test = Environment.GetEnvironmentVariable(@"ProgramFiles") +
                   @"\SK Communications\NATEON\BIN\NateOnMain.exe";
                    if (File.Exists(test)) { return true; }
                }
            }
            else if (check == 4)
            { // App(Windows Store) Kakao Check
                installed = WinStoreApp("17884BE984322");
                if (installed == true) return true;
            }
            else if (check == 5)
            { // App(Windows Store) Line Check
                installed = WinStoreApp("NAVER.LINE");
                if (installed == true) return true;
            }
            else if (check == 6)
            { // App(Windows Store) Skype Check
                installed = WinStoreApp("Microsoft.SkypeApp");
                if (installed == true) return true;
            }
            else if (check == 7)
            { // Skype for business
                try
                {
                    test = Convert.ToString(Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Microsoft.Lync.15ClassicJoin.1", "", "a"));
                    if (test != null) return true;
                    else
                    {
                        test = Convert.ToString(Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\IMProviders\Lync", "FriendlyName", ""));
                        if (test != null) return true;
                    }
                }
                catch
                {
                    return false;
                }
            }
            return false;
        }
        catch
        {
            return false; // 수정, 메신저 미발견 시
        }
    }
    internal bool WinStoreApp(string AppName)
    {
        int i = 0;
        if (AppName == "Microsoft.SkypeApp")
        {
            string folder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Packages");
            DirectoryInfo directorys = new DirectoryInfo(folder);
            DirectoryInfo[] find = directorys.GetDirectories("*" + AppName + "*.*");
            foreach (DirectoryInfo foundDir in find) { i = i + 1; }
        }
        else
        {
            var drive = Path.GetPathRoot(Environment.SystemDirectory);
            DirectoryInfo directorys = new DirectoryInfo(drive + @"ProgramFiles\WindowsApps");
            DirectoryInfo[] find = directorys.GetDirectories("*" + AppName + "*.*");
            foreach (DirectoryInfo foundDir in find) { i = i + 1; }
        }
        if (i >= 1) return true;
        else return false;
    }
    internal string GetBootInfo()
    {
        string result = null;
        try
        {
            ClassZ z = new ClassZ();
            string OSInfo = z.RunCommand("%windir%" + @"\sysnative\bcdedit /enumACTIVE"); // 횔성 상태의 BCD 항목 확인
            int BootCount = 0;
            var lines = new Regex(@"\r\n|\n|\r", RegexOptions.Singleline).Split(OSInfo);
            // 1줄 뵬로 나누기
            string boot = "";
            foreach (var line in lines)
            { // 끝까지 반복
                if (line.Contains("description") && !line.Contains("Windows BootManager"))
                { // description이 Windows Boot Manager인 경우 제외하고 모두!
                    if (boot != "") boot = boot + ", " + line.Remove(0, 20).Trim(); // 기존 boot 설정되었다면 / 새 항목 쓰기
                    else boot = line.Remove(0, 20).Trim(); // 첫 항목인 경우 바로 추가
                    BootCount++; // 부팅 영역 개수 +1
                }
            }
            result += BootCount + " (" + boot + ")";
        }
        catch
        {
            result = "Not found";
        }
        return result;
    }
    internal string GetFileSystem()
    {
        string result = null;
        try
        {
            DriveInfo[] Drives = DriveInfo.GetDrives();
            foreach (DriveInfo d in Drives)
            {
                if (d.IsReady == true)
                {
                    result += d.DriveFormat + "(" + d.Name + "), ";
                }
            }
            result = result.Substring(0, result.Length - 2);
        }
        catch
        {
            result = "Not found";
        }
        return result;
    }
    internal string ExitCacheClear(int program)
    {
        // IE 종료 시 캐시 삭제
        if (program == 0)
        {
            RegistryKey reg = Registry.CurrentUser.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Internet Settings\Cache", true);
            if (reg != null)
            {
                Object val = reg.GetValue("Persistent");
                if (null != val)
                {
                    if (val.ToString() == "1") val = "Y";
                    else if (val.ToString() == "0") val = "N";
                    return Convert.ToString(val); // Setting value
                }
                else
                {
                    return "S"; // Not setting (설정한 적이 없음)
                }
            }
            else
            {
                return "X"; // Not install (이 시스템에 설치가 안되어 있음)
            }
        }
        // Edge 종료 시 캐기 삭제
        else if (program == 1)
        {
            RegistryKey reg = Registry.CurrentUser.OpenSubKey(@"Software\Classes\LocalSettings\Software\Microsoft\Windows\CurrentVersion\AppContainer\Storage\microsoft.microsoftedge_8wekyb3d8bbwe\MicrosoftEdge\Privacy", true);
            if (reg != null)
            {
                Object val = reg.GetValue("ClearBrowsingHistoryOnExit");
                if (null != val)
                {
                    if (val.ToString() == "1") val = "Y";
                    else if (val.ToString() == "0") val = "N";
                    return Convert.ToString(val); // Setting value
                }
                else
                {
                    return "S"; // Not setting
                }
            }
            else
            {
                return "X"; // Not install }
            }
            return null;
        }
        internal bool PortCheck(string type, int port)
        {
            if (type == "TCP")
            {
                var tcpport = IPGlobalProperties.GetIPGlobalProperties();
                TcpConnectionInformation[] conns = tcpport.GetActiveTcpConnections();
                foreach (var cn in conns)
                {
                    if (cn.LocalEndPoint.Port == port)
                    {
                        return true;
                    }
                }
                IPEndPoint[] endpoints = tcpport.GetActiveTcpListeners();
                foreach (var ep in endpoints)
                {
                    if (ep.Port == port)
                    {
                        return true;
                    }
                }
            }
            else if (type == "UDP")
            {
                var udpport = IPGlobalProperties.GetIPGlobalProperties().GetActiveUdpListeners().Any(p => p.Port == port);
                if (udpport) return true;
            }
            return false;
        }
        internal string[] Port()
        {
            string[] oport = { null, null };
            int[] TCPArray = new int[7] { 80, 135, 136, 139, 445, 3389, 5985 };
            int[] UDPArray = new int[2] { 137, 138 };
            foreach (int tcpport in TCPArray) if (PortCheck("TCP", tcpport)) oport[0] +=
           tcpport + ", ";
            oport[0] = oport[0].Substring(0, oport[0].Length - 2);
            if (System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable())
            {
                foreach (int udpport in UDPArray) if (PortCheck("UDP", udpport)) oport[1]
               += udpport + ", ";
                oport[1] = oport[1].Substring(0, oport[1].Length - 2);
            }
            else
            {
                oport[1] = "Unknown";
            }
            return oport;
        }
        internal string ShareAutoRenewal()
        {
            RegistryKey reg = Registry.LocalMachine.OpenSubKey(@"SYSTEM\CurrentControlSet\Services\LanManServer\Parameters", true);
            if (reg != null)
            {
                Object val = reg.GetValue("AutoShareWks");
                Object val2 = reg.GetValue("AutoShareServer");
                if (val != null)
                {
                    int val_i = Convert.ToInt32(val);
                    if (val_i == 0) return "Disable";
                }
                else if (val2 != null)
                {
                    int val_i = Convert.ToInt32(val2);
                    if (val_i == 0) return "Disable";
                }
            }
            return "Enable";
        }
        internal string GetShareInfo(ListView lvw)
        {
            string rtn = null;
            lvw.Items.Clear();
            ManagementClass shares = new ManagementClass("Win32_Share");
            ManagementObjectCollection specificShares = shares.GetInstances();
            foreach (ManagementObject share in specificShares)
            {
                ListViewItem ShareList = new ListViewItem();
                // 공유 이름
                string share_name = share["Name"].ToString();
                ShareList.Text = share_name;
                rtn += share_name;
                // 공유 경로
                string share_path = share["Path"].ToString();
                ShareList.SubItems.Add(share_path);
                rtn += "(" + share_path;
                // 공유 설명 || 공유 권한
                string share_cap = share["Caption"].ToString();
                if (share_cap.Contains("기본") || share_cap.Contains("원격")) // 기본, 원격이들어있으면 설명 가져오고,
                {
                    ShareList.SubItems.Add(share_cap);
                    if (share_path != "")
                    {
                        rtn += ", " + share_cap;
                    }
                    else
                    {
                        rtn += share_cap;
                    }
                }
                else // 그렇지 않은 경우 권한을 가져오기
                {
                    // 공유 권한 "Everyone: 누구나"
                    string share_per = null;
                    if (Environment.Is64BitOperatingSystem == true)
                    {
                        if (File.Exists("accesschk64.exe") == true)
                        {
                            share_per = GetSharePerm(@"accesschk64 -qwsu " +
                           "\"Everyone\" " + @share_path + @"\ /d");
                        }
                    }
                    else
                    {
                        if (File.Exists("accesschk.exe") == true)
                        {
                            share_per = GetSharePerm(@"accesschk.exe -qwsu " +
                           "\"Everyone\" " + @share_path + @"\ /d");
                        }
                    }
                    if (share_per.Contains("RW")) share_per = @"읽기/쓰기";
                    else if (share_per.Contains("W")) share_per = "쓰기";
                    else share_per = "읽기 전용 혹은 실패";
                    ShareList.SubItems.Add(share_per);
                    rtn += ", " + share_per;
                }
                rtn += "), ";
                lvw.Items.Add(ShareList);
            }
            for (int width = 0; width < lvw.Columns.Count; width++)
            {
                lvw.Columns[width].Width = -2;
            }
            rtn = rtn.Substring(0, rtn.Length - 2);
            return rtn;
        }
        internal string GetShareInfo2(ListView lvw)
        {
            lvw.Items.Clear();
            System.Diagnostics.ProcessStartInfo proInfo = new
           System.Diagnostics.ProcessStartInfo();
            System.Diagnostics.Process pro = new System.Diagnostics.Process();
            proInfo.FileName = @"cmd";
            proInfo.CreateNoWindow = true;
            proInfo.UseShellExecute = false;
            proInfo.RedirectStandardOutput = true;
            proInfo.RedirectStandardInput = true;
            proInfo.RedirectStandardError = true;
            pro.StartInfo = proInfo;
            pro.Start();
            pro.StandardInput.Write(@"net share" + Environment.NewLine);
            pro.StandardInput.Close();

            string resultValue = pro.StandardOutput.ReadToEnd();
            pro.Close();
            int location = resultValue.IndexOf("----------------------------");
            resultValue = resultValue.Substring(location);
            string[] result = resultValue.Split(new string[] { "\n" },
           StringSplitOptions.None);
            foreach (string s in result)
            {
                char[] chars = { ' ' };
                string[] results = s.Split(chars, StringSplitOptions.RemoveEmptyEntries);
            }
            return resultValue;
        }
        internal string GetSharePerm(string sender)
        {
            string output = null;
            int output_line = 0;
            ProcessStartInfo psi = new ProcessStartInfo("cmd", "/c " + sender)
            {
                WindowStyle = ProcessWindowStyle.Hidden,
                UseShellExecute = false,
                RedirectStandardOutput = true,
                CreateNoWindow = true
            };
            using (Process process = Process.Start(psi))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    while ((output = reader.ReadLine()) != null)
                    {
                        if (output_line == 5) return output;
                        output_line++;
                    }
                }
            }
            return output;
        }
        internal string[] XService(ListView lvw)
        {
            ServiceController[] services = ServiceController.GetServices();
            string[] srvneed = new string[] { "MapsBroker", "lfsvc", "iphlpsvc", "PhoneSvc", "SensorService", "SysMain", "WbioSrvc", "WSearch", "NaturalAuthentication", "DusmSvc" };
            string[] srvadd = new string[] { "BthAvctpSvc", "bthserv", "EventSystem", "DiagTrack", "DPS", "TrkWks", "diagnosticshub.standardcollector.service", "NetTcpPortSharing", "PhoneSvc", "Spooler", "RemoteRegistry", "RemoteAccess", "LanmanServer", "shpamsvc", "SCardSvr", "SSDPSRV", "lmhosts", "TabletInputService", "stisvc", "wisvc", "FrameServer", "LanmanWorkstation", "SEMgrSvc", "DisplayEnhancementService" };
            string[] result = { null, null, null };
            int srvaddlen = 0, srvneedlen = 0;
            lvw.Items.Clear();
            foreach (ServiceController service in services)
            {
                try
                {
                    ListViewItem XServiceList = new ListViewItem();
                    XServiceList.Text = service.DisplayName;
                    RegistryKey regKey1 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\services\\" +
                   service.ServiceName);
                    string StartType = Convert.ToString(regKey1.GetValue("Start"));
                    // (StartType == 2, 3) 0: 부탕, 1: 시스템, 2: 자동, 3: 수동, 4: 사용 안함
                    int ServiceStatus = Convert.ToInt32(service.Status);
                    // (ServiceStatus == 0) 0: 실행 중, 1: 일시 중지 중, 2: 시작 보류 중, 3: 일시 중지 보류 중, 4: 일시 중지 후 서비스 시작(대기 중), 5: 중지 보류 중, 6: 중지, 255: 상태 가져올 수 없음
                    if (StartType == "2" || (StartType == "3") && (ServiceStatus == 0))
                    {
                        if (StartType == "0") StartType = "부팅 시, 자동 시작";
                        else if (StartType == "1") StartType = "시스템";
                        else if (StartType == "2") StartType = "자동 시작";
                        else if (StartType == "3") StartType = "수동 시작";
                        else if (StartType == "4") StartType = "사용안함";
                        foreach (string x in srvneed)
                        {
                            if (service.ServiceName.Contains(x))
                            {
                                result[0] += service.DisplayName + ", ";
                                srvneedlen += 1;
                                XServiceList.SubItems.Add("추천 ");
                                XServiceList.SubItems.Add(service.Status.ToString());
                                XServiceList.SubItems.Add(StartType);
                                XServiceList.SubItems.Add(regKey1.GetValue("Description").ToString());
                                lvw.Items.Add(XServiceList);
                                regKey1.Close();
                            }
                        }
                        foreach (string x in srvadd)
                        {
                            if (service.ServiceName.Contains(x))
                            {
                                result[1] += service.DisplayName + ", ";
                                srvaddlen += 1;
                                XServiceList.SubItems.Add("선택 ");
                                lvw.Items.Add(XServiceList);
                                XServiceList.SubItems.Add(service.Status.ToString());
                                XServiceList.SubItems.Add(StartType);
                                XServiceList.SubItems.Add(regKey1.GetValue("Description").ToString());
                                regKey1.Close();
                            }
                        }
                    }
                    regKey1.Close();
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                }
                for (int width = 0; width < lvw.Columns.Count; width++)
                {
                    lvw.Columns[width].Width = -2;
                }
            }
            result[2] = lvw.Items.Count.ToString() + "(" + srvneedlen + "/" + srvaddlen + ")";
            return result;
        }
    }
}
